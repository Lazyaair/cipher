# import math
import numpy as np

"""
加解密中每轮的密钥分别由种子密钥经过密钥扩展算法得到。算法中16字节的明文、密文和轮子密钥都以一个4x4的矩阵表示。
"""

# S盒
S_Box = np.array([
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0xb8, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
], dtype=np.uint8)
S_Box_Reverse = np.array([
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
], dtype=np.uint8)

Mix_Col_Matrix = np.array([
    [0x02, 0x03, 0x01, 0x01],
    [0x01, 0x02, 0x03, 0x01],
    [0x01, 0x01, 0x02, 0x03],
    [0x03, 0x01, 0x01, 0x02]
], dtype=np.uint8)

Mix_Col_Matrix_Reverse = np.array([
    [0x0e, 0x0b, 0x0d, 0x09],
    [0x09, 0x0e, 0x0b, 0x0d],
    [0x0d, 0x09, 0x0e, 0x0b],
    [0x0b, 0x0d, 0x09, 0x0e]
], dtype=np.uint8)

# 常量
RC = np.array([0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36], dtype=np.uint8)
R = 0

# 轮密钥
Round_Key = list()
Round = -1


def padding(txt: bytes, is_decrypt=False) -> list[np.ndarray]:
    """
    填充
    :param is_decrypt: 解密不填充
    :param txt: 待填充对象
    :return: n*4*4
    """
    txt_list = list()  # 待返回值
    length = len(txt)  # 字节个数
    r = length % 16

    # 分组入列
    for i in range(length // 16):
        temp = np.array(list(txt[i * 16:(i + 1) * 16]), dtype=np.uint8).reshape((4, 4))
        txt_list.append(temp)

    # 填充最后一组
    if not is_decrypt:
        last_block = np.array(
            list(txt[length - r:] + (16 - r) * (16 - r).to_bytes(1, byteorder='big')),
            dtype=np.uint8
        ).reshape((4, 4))
        txt_list.append(last_block)
    return txt_list


def tran_de(code_list: list[np.ndarray]) -> str:
    padding_num = -int(code_list[-1][-1][-1])
    t_bytes = list()
    for i in code_list:
        t_bytes.append(i.tobytes())
    t_bytes = b''.join(t_bytes)[:padding_num].decode()
    return t_bytes


def tran_en(code_list: list[np.ndarray]) -> bytes:
    t_bytes = list()
    for i in code_list:
        t_bytes.append(i.tobytes())
    return b''.join(t_bytes)


def byte_substitution(state: np.array([[]]), reverse=False):
    """
    字节替换（逆）
    :param state: 4*4矩阵
    :param reverse: 是否为逆
    :return: 4*4矩阵
    """
    if reverse:
        global S_Box_Reverse
        s = S_Box_Reverse
    else:
        global S_Box
        s = S_Box
    for x in range(4):
        for y in range(4):
            row = h_bits(state[x][y])
            col = l_bits(state[x][y])
            state[x][y] = s[row][col]
    return state


def row_shift(state: np.array([[]]), reverse=False):
    """
    行移位（逆）
    :param state: 4*4矩阵
    :param reverse: 是否为逆
    :return: 4*4矩阵
    """
    for i in range(1, 4):
        if not reverse:
            state[i] = np.roll(state[i], -i)
        else:
            state[i] = np.roll(state[i], i)
    return state


def col_confusion(state: np.array([[]]), reverse=False):
    """
    列混淆（逆）
    :param state: 4*4矩阵
    :param reverse: 是否为逆
    :return: 4*4矩阵
    """
    if reverse:
        global Mix_Col_Matrix_Reverse
        m = Mix_Col_Matrix_Reverse
    else:
        global Mix_Col_Matrix
        m = Mix_Col_Matrix
    temp = np.zeros(shape=(4, 4), dtype=np.uint8)
    for i in range(4):
        for j in range(4):
            for k in range(4):
                temp[i][j] = temp[i][j] ^ dot(m[i][k], state[k][j])
    return temp


def round_key_plus(state, reverse=False):
    """
    密钥加
    :param reverse: 加解密
    :param state: 4*4矩阵
    :return: 4*4矩阵
    """
    global Round
    global Round_Key
    if not reverse:
        Round = Round + 1
        state = state ^ Round_Key[Round]
    else:
        state = state ^ Round_Key[Round]
        Round = Round - 1
    return state


def key_extend(state: np.array([[]])):
    """
    密钥拓展
    :param state: 4*4矩阵
    :return: 4*4矩阵
    """
    global Round_Key
    global R
    Round_Key.append(state.copy())
    for i in range(10):
        state[:, 0] = state[:, 0] ^ g(state[:, 3])
        state[:, 1] = state[:, 0] ^ state[:, 1]
        state[:, 2] = state[:, 1] ^ state[:, 2]
        state[:, 3] = state[:, 2] ^ state[:, 3]
        temp = state.copy()
        Round_Key.append(temp)
    R = 0


def g(w):
    """
    g函数
    :param w: 4*1向量
    :return: 4*1向量
    """
    global RC
    global R
    global S_Box
    w = np.roll(w, -1)
    for i in range(4):
        num = w[i]
        row = h_bits(num)
        col = l_bits(num)
        w[i] = S_Box[row][col]
    w[0] = w[0] ^ RC[R]
    R = R + 1
    return w


def h_bits(num):
    """
    高4位的值
    :param num: 字节变换的单元
    :return: 高4位
    """
    return (num >> 4) & 0x0F


def l_bits(num):
    """
    低4位的值
    :param num: 字节变换的单元
    :return: 低4位
    """
    return num & 0x0F


def normal_round(state: np.array([[]])):
    """
    前9轮函数
    :param state: 4*4矩阵
    :return: 4*4矩阵
    """
    state = byte_substitution(state)
    state = row_shift(state)
    state = col_confusion(state)
    return round_key_plus(state)


def normal_round_reverse(state: np.array([[]])):
    """
    前9轮函数
    :param state: 4*4矩阵
    :return: 4*4矩阵
    """
    state = row_shift(state, reverse=True)
    state = byte_substitution(state, reverse=True)
    state = round_key_plus(state, reverse=True)
    return col_confusion(state, reverse=True)


def last_round(state: np.array([[]])):
    """
    第10轮函数
    :param state: 4*4矩阵
    :return: 4*4矩阵
    """
    state = byte_substitution(state)
    state = row_shift(state)
    state = round_key_plus(state)
    return state


def last_round_reverse(state: np.array([[]])):
    """
    第10轮函数
    :param state: 4*4矩阵
    :return: 4*4矩阵
    """
    state = row_shift(state, reverse=True)
    state = byte_substitution(state, reverse=True)
    state = round_key_plus(state, reverse=True)
    return state


def dot(x, y):
    """
    模X**4+1乘法
    :param x: 给定4*4矩阵的数0x01/0x02/0x03
    :param y: 混淆矩阵的数
    :return: x·y
    """
    if x == 0x01:
        return y
    elif x == 0x02:
        if h_bits(y) >= 8:
            return ((y << 1) & ((1 << 8) - 1)) ^ 0x1b
        else:
            return y << 1
    elif x == 0x03:
        return dot(0x02, y) ^ y
    elif x == 0x09:
        return dot(0x02, dot(0x02, dot(0x02, y))) ^ y
    elif x == 0x0b:
        return dot(0x02, dot(0x02, dot(0x02, y))) ^ dot(0x02, y) ^ y
    elif x == 0x0d:
        return dot(0x02, dot(0x02, dot(0x02, y))) ^ dot(0x02, dot(0x02, y)) ^ y
    elif x == 0x0e:
        return dot(0x02, dot(0x02, dot(0x02, y))) ^ dot(0x02, dot(0x02, y)) ^ dot(0x02, y)


def encrypt_block(msg_block: np.ndarray, key: np.ndarray):
    global Round
    global Round_Key
    Round = -1
    Round_Key.clear()
    key_extend(key)
    msg_block = round_key_plus(msg_block)
    for _ in range(9):
        msg_block = normal_round(msg_block)
    return last_round(msg_block)


def decrypt_block(cipher_block: np.ndarray, key: np.ndarray):
    global Round
    global Round_Key
    Round_Key.clear()
    key_extend(key)
    Round = 10
    cipher_block = round_key_plus(cipher_block, reverse=True)
    for _ in range(9):
        cipher_block = normal_round_reverse(cipher_block)
    return last_round_reverse(cipher_block)
